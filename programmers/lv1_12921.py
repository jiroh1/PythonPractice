"""
소수찾기
https://school.programmers.co.kr/learn/courses/30/lessons/12921
소수 정

요약 1과 자기 자신만으로 나누어 떨어지는 1보다 큰 양의 정수.
이를테면, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,… 등은 모두 소수이다.
4 = 22, 6 = 2 × 3, 16 = 24 … 등, 소수가 아닌 자연수를 합성수(合成數)라 하며, 1은 소수도 아니고 합성수도 아니다. 자연수 n이 소수인지 아닌지를 판정하려면,
소수 본문 이미지 1인 범위에 있는 모든 소수 p로 n을 나누어 보아, 나누어 떨어지지 않으면 소수이고, 나누어 떨어지면 합성수이다.
즉, 소수는 양의 약수로 1과 자신만을 가진 자연수이며 합성수는 양의 약수가 1과 자기자신을 포함하여 3개 이상인 자연수이다.


정수의 열 2, 3, 4, 5,…로부터 소수를 찾아내는 방법으로 그리스 시대부터 알려진 에라토스테네스의 체(sieve of Erathosthenes)라는 것이 있는데, 이 방법도 실은 위와 같은 원리에 따른 것이다.
또 메르센의 소수(Mersenne number)도 소수의 유력한 판정법을 제공해 준다.
무한히 많은 소수가 존재한다는 것은 그리스 시대부터 알려진 사실이며, 유클리드의 《기하학원본》에도 그 정리가 전해진다. 이 정리를 초등 정수론의 기본 정리라고 한다.

"""


def solution(n):
    # 2 부터 n까지 set을 만듦
    num = set(range(2, n + 1))

    for i in range(2, n + 1):

        if i in num:
            # 범위 안에서 아까 만든 num 안에 i가 있으면그 i의 배수를 모두 제거
            # 2*i - i의 다음 배수부터, n+1 - 마지막 숫자 범위 중 , i 배수로
            num -= set(range(2 * i, n + 1, i))

    return len(num)


n = 10

print(solution(n))
# 정확성: 75.0
# 효율성: 25.0
# 합계: 100.0 / 100.0
"""
문제 설명
1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하는 함수, solution을 만들어 보세요.

소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.
(1은 소수가 아닙니다.)

제한 조건
n은 2이상 1000000이하의 자연수입니다.
입출력 예
n	result
10	4
5	3
입출력 예 설명
1부터 10 사이의 소수는 [2,3,5,7] 4개가 존재하므로 4를 반환
입출력 예 #1

입출력 예 #2
1부터 5 사이의 소수는 [2,3,5] 3개가 존재하므로 3를 반환


# 정리
1. n % i ==0 인 개념을 처음에 생각 했으나, 소수에 대한 이해가 정확하지 않았음
2. logic이 어려운 것이 아니라 소수에 대해서 정확히 이해해서  하지 못함
3. 에라토스테네스의 체 방법을 확인했지만, 그걸 구현할 생각을 못했다. 바로 직전 풀었던 문제(lv1_76501)에서도 아닌걸 제하는 방법을 생각했는데, 그것을 조금만 바꿨으면 되었을 듯.

# 다른풀이
# case 1  - > 시간초과 
def solution(n):
    count = 0
    # 2부터 n까지 확인
    for n in range(2, n+1):
        # n 전까지 나누어서 0이 되는 숫자가 있으면 끝. ex) 6 % 2 ==0 , 5%2 == 1 이 됨.
        for i in range(2, n):
            if n%i == 0:
                break
        else:
            count += 1
        print('ccc', count)

    return count
    
채점 결과
정확성: 56.3
효율성: 0.0
합계: 56.3 / 100.0    

#case 2 - > 성공 이게 속도 더빠름

def solution(n):
    num = set(range(2, n + 1))
    for i in range(2, int(n**0.5) + 1):
        if i in num:
            num -= set(range(i * i,  n+ 1, i))

    return len(num)



"""